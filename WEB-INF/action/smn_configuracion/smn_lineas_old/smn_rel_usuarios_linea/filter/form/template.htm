<!doctype html>
<html>

<head>

<link rel="stylesheet" type="text/css" href="${def:context}/dinamica.css" />

<!--biblioteca generica JS/Dinamica-->
<script type="text/javascript" src="${def:context}/action/script">
</script>

</head>

<body>

<!--banner-->
<div class="banner">
	${lbl:b_users}
	<img src="${def:context}/images/close.png" class="button" onclick="parent.closeDialog(); parent.search();" title="${lbl:b_close_button}" style="float:right; cursor:pointer;">
	${req:progress}
</div>

<!--formulario de filtro-->
<form name="form1" onsubmit="return search()" style="width:650px;">

	<!--titulo-->
	<h1>${lbl:b_filter_find}</h1>

	<table>
	
	<!--ancho de la columna de etiquetas-->
	<col style="width:40%">

	<!--campos-->
	<tr>
		<td>${lbl:b_lines}</td>
		<td>
			<select name="smn_lineas_id" id="smn_lineas_id" onchange="chgCombo(smn_lineas_id.options[smn_lineas_id.selectedIndex].text,'smn_lineas_id_name');">
				<option value="">[Cualquiera]</option>
				<smn_lineas_id_rows>
				<option value="${fld:id}">${fld:item}</option>

				</smn_lineas_id_rows>
			</select> 
			<input id="smn_lineas_id_name" name="smn_lineas_id_name" type="hidden">
		</td>
	</tr>
	<tr>
		<td>${lbl:b_users}</td>
		<td>
			<select name="smn_usuarios_id" id="smn_usuarios_id" onchange="chgCombo(smn_usuarios_id.options[smn_usuarios_id.selectedIndex].text,'smn_usuarios_id_name');">
				<option value="">[Cualquiera]</option>
				<smn_usuarios_id_rows>
				<option value="${fld:id}">${fld:item}</option>

				</smn_usuarios_id_rows>
			</select> 
			<input id="smn_usuarios_id_name" name="smn_usuarios_id_name" type="hidden">
		</td>
	</tr>
	
	</table>

	
	<!--botones-->	
	<input type="submit" value="${lbl:b_find_button}" class="button">
	<input id="grabar" type="submit" value="${lbl:b_add_button}"  onclick="showEditor()" class="button">
	<input type="button" value="${lbl:b_clean_button}" class="button" onclick="clearForm('form1')">	
	<input id="copiar" type="button" value="${lbl:b_copy_button}" onclick="getFormValuesToCopy('form1')" class="button">
	<input id="pegar" type="button" value="${lbl:b_paste_button}" onclick="getFormValuesToPaste('form1')" class="button">
	<input id="salir" type="button" value="${lbl:s_exit}" onclick="parent.closeDialog(); parent.search();" class="button">
	
</form>

<!--panel de respuesta AJAX #1-->
<div id="response" style="display:none; width:100%; margin-top:10px;"></div>
	
</body>

<!--codigo de soporte del template-->
<script type="text/javascript">

	//inicializacion de la pagina cuando carga
	onload = function()
	{ 
		showFilter();

		//alert("'${fld:codigo}'-'${fld:descripcion}'");
			if('${fld:source}' == 'smn_relacion'){ 
				var combo = document.getElementById('smn_lineas_id');
				setSelectedIndex('${fld:codigo}', combo, '${fld:descripcion}');
				document.form1.smn_lineas_id.disabled=true;
			
			}
		
		search();
	} 
	
	
		
	//mostrar filtro de busqueda
	function showFilter()
	{
		document.getElementById("response").style.display='none';
		setFocusOnForm("form1");
	}
	
	//ejecutar consulta
	function search()
	{
		var url = "${def:actionroot}/search";
		
		//determina si refresca y se para en la pagina actual o en la pagina 1
		if (currentPage > 0)
			url = "${def:actionroot}/search?currentpage=" + currentPage;

		//definir funcion goBack()
		_goBackFn = showFilter;
		
		clearErrorMessages();

		//llamada Ajax...
		return ajaxCall(	httpMethod="POST", 
							uri=url, 
							divResponse="response", 
							divProgress="status", 
							formName="form1", 
							afterResponseFn=null, 
							onErrorFn=showFilter);

	}

	//mostrar una pagina del grid
	function viewPage()
	{
		var url = "${def:actionroot}/view";
		//llama a la funcion para ir a la pagina indicada 
		gotoPage(url);
	}		
	
	//retorna al estado previo que corresponde
	//al estado actual de la pagina, cada llamada Ajax
	//se encarga de definir cual es la funcion de goBack() que aplica
	function goBack() 
	{
		_goBackFn()			
	}
	
	//invoca la generacion de un PDF en un popup
	function openPDF()
	{
		var features = "height=500,width=800,status=no,toolbar=no,menubar=no,location=no,scrollbars=yes,resizable=yes";
		var url = "${def:context}${def:actionroot}/pdf?random=" + Math.random();
		var w = window.open(url, null, features);
	}

	//invoca la generacion de un Excel en un popup
	function openExcel()
	{
		var features = "height=500,width=800,status=no,toolbar=no,menubar=no,location=no,scrollbars=yes,resizable=yes";
		var url = "${def:context}${def:actionroot}/excel?random=" + Math.random();
		var w = window.open(url, null, features);
	}
	
	//exportar a xml
	function openXml() {
		var features = "height=500,width=800,status=no,toolbar=no,menubar=no,location=no,scrollbars=yes,resizable=yes";
		var url = "${def:context}${def:actionroot}/xml/search?random=" + Math.random();
		var w = window.open(url, null, features);
	}
	
	//exportar a texto
	function openTxt() {
		var features = "height=500,width=800,status=no,toolbar=no,menubar=no,location=no,scrollbars=yes,resizable=yes";
		var url = "${def:context}${def:actionroot}/txt/search?random=" + Math.random();
		var w = window.open(url, null, features);
	}
	
	//envio de emails
	function openEmails() {
		var uri = "${def:context}${def:actionroot}/email/form";					
		openDialog("editor0", uri, 950, 600);	
	}
	
	//mostrar el detalle de un registro
	function getDetail(id)
	{
//		//alert('Colocar su código aquí.')
		
		var uri = "${def:context}${def:actionroot}/detail/form?id=" + id;
		openDialog("dialog", uri, 670, 250);
		
	}
	
	//muestra un DIV+IFRAME con el formulario de CRUD
	function showEditor(id)
	{
//		//alert('Colocar su código aquí.')
		
		var uri = "";
		if (id==null)
		 	uri = "${def:context}${def:actionroot}/editor/form?id2=${fld:id2}&codigo=${fld:codigo}&source=smn_relacion&descripcion=${fld:descripcion}";	
		else
			uri = "${def:context}${def:actionroot}/editor/form?id=" + id;
			
		openDialog("editor", uri, 670, 280);
		
	}
			
	function deleteRecord(id) {
//		//alert('Colocar su código aquí.')
	
		alertBox('${lbl:b_delete_record_button}', '${lbl:b_delete_button}', '${lbl:b_cancel_button}', 'deleteRecordOK(' + id + ')')				
	}
		
	//eliminar un registro
	function deleteRecordOK(id) {
			ajaxCall(httpMethod="GET", 
							uri="${def:actionroot}/delete?id=" + id,
							divResponse=null, 
							divProgress="status", 
							formName=null, 
							afterResponseFn=null, 
							onErrorFn=null);	
	}

		//Author     : SIMONE
	//Description: Set selected index into combo box
	//Return     : None
		function setSelectedIndex(code, combo, description) 
		{
			//alert(code, combo, descripcion);
			//alert('text = ' + combo.options[i].text + ' value = ' + combo.options[i].value)
				//alert('text = ' + combo.options[i].text + ' value = ' + combo.options[i].value)
		    for (var i = 0; i < combo.options.length; i++) 
		    {
				var valueText = code;
				if (description != null)
				{
					valueText = valueText + ' - ' + description;
				}
	    	    if (combo.options[i].text == valueText) 
				{
	        
	        	combo.options[i].selected = true;
				return;
	        	}
	    	}  
		}

	//Author     : SIMONE
	//Description: Set first element as selected value
	//Return     : None
	function setElementFirstIndex(id)
		{
			var combo = document.getElementById(id); combo.selectedIndex = 0;
		}

	//Author     : SIMONE
	 //Description: Insert new value into combo box
	 //Return     : None
	 function insertComboBox(code, combo, description, field) 
		{
		 	var valueText = code;
			if (description != null)
			{
				valueText = valueText + ' - ' + description;
			}
			var option = document.createElement("option");
			option.text = valueText; 
			option.value = bdID;
			//alert(field)		
			if (field == 'smn_clase_auxiliar_rf')
			{
				document.form1.smn_clase_auxiliar_rf.add(option, combo.options.length); 
			}			
			if (field == 'smn_auxiliar_rf')
			{
				document.form1.smn_auxiliar_rf.add(option, combo.options.length); 
			}				
		}
	 
	//Author     : SIMONE
	//Description: Add new value to combo box
	//Return     : None
	function addValueToCombo(code, description, field) 
		{	
			var combo = document.getElementById(field);	    
			insertComboBox(code, combo, description, field); 
		}
	
		
	//Author     : SIMONE
	//Description: Set selected index into combo box
	//Return     : None
	function setSelectedIndexValue(value, combo) 
			{
				for (var i = 0; i < combo.options.length; i++) 
				{					
					if (combo.options[i].text == value) 
					{
						combo.options[i].selected = true;
						return;
					}
				} 
			}
	
	//Author     : SIMONE
	//Description: Get text valueof selected index
	//Return     : Text associated to index
	function getSelectedIndex(combo) 
			{
				for (var i = 0; i < combo.options.length; i++) 
				{
					if (combo.options[i].selected == true) 
					{
						return combo.options[i].text; 
					}
				} 	
			}
	
	function getIDSelectedIndex(combo) 
			{
				for (var i = 0; i < combo.options.length; i++)  
				{
					if (combo.options[i].selected == true) 
					{
						return combo.options[i].value; 
					} 
				}
			}
	
	var bdID;
	function setID(id)
	{
		bdID = id; 
	}

	//Author     : SIMONE
	//Description: Set value to combo box
	//Parameters: 	code 		â€“ (it is code associated into each database table) 
	//             	description 	- it is description associated into each database table 
	//             	field 		- name combo field
	//             	id 		- identifier retrieved after transaction
	//             	linked 		- flag indicates 'true' when combos are linked.
	//Return     : None
	function setValueComboBox(code, description, field, linked)
			{
				//add value text to combo
				addValueToCombo(code,description,field);
				//get select object 
				var combo = document.getElementById(field);
				//set element selected to field referenced
				setSelectedIndex(code,combo, description);
				//set text value to combo field
				var valueText = getSelectedIndex(combo);		
				//get hidden field in order to set any value
				var combo = document.getElementById(field+'_name');
		
				combo.text  = valueText;
				combo.value = bdID; 
			}

			
</script>

</html>
